# Generated by Django 4.2.6 on 2023-11-29 07:50

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_url', models.URLField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Coin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_purchased', models.DateTimeField(default=datetime.datetime(2023, 11, 29, 13, 20, 40, 199678))),
                ('current_coin_amount', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='List_Coin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coin_id', models.CharField(max_length=64, unique=True)),
                ('symbol', models.CharField(max_length=16, unique=True)),
                ('title', models.CharField(max_length=64, unique=True)),
                ('logo_url', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Watchlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watch_list', models.ManyToManyField(blank=True, related_name='watchers', to='exchange.list_coin')),
                ('watcher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watching', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins', models.ManyToManyField(blank=True, related_name='containing_wallets', to='exchange.coin')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_coin_no', models.FloatField()),
                ('order_price_per_coin', models.FloatField()),
                ('order_amount', models.FloatField(default=0)),
                ('is_buy', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=datetime.datetime(2023, 11, 29, 13, 20, 40, 199678))),
                ('is_fulfilled', models.BooleanField(default=False)),
                ('is_closed', models.BooleanField(default=False)),
                ('closed_fullfilled_on', models.DateTimeField(null=True)),
                ('lister', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('order_coin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listed', to='exchange.list_coin')),
            ],
        ),
        migrations.CreateModel(
            name='Order_wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frozen_amount', models.FloatField(default=0)),
                ('lister', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temp_wallet', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='active_orders', to='exchange.orders')),
                ('temp_coin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='running', to='exchange.list_coin')),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_on', models.DateTimeField(default=datetime.datetime(2023, 11, 29, 13, 20, 40, 199678))),
                ('transacted_coin_value', models.FloatField()),
                ('transacted_amount', models.FloatField(default=0)),
                ('transact_action', models.CharField(blank=True, max_length=64)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='send', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received', to=settings.AUTH_USER_MODEL)),
                ('transacted_coin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transacted', to='exchange.list_coin')),
            ],
        ),
        migrations.AddField(
            model_name='coin',
            name='coin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='exchange.list_coin'),
        ),
    ]
